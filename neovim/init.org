#+Title: Neovim configuration file
#+PROPERTY: header-args:lua :tangle ~/dev/dotfiles/neovim/init.lua

* Base Configuration
This config is extended/derived from the base config neovim-lua's kickstart.nvim repository
https://github.com/nvim-lua/kickstart.nvim/blob/e3b7686/init.lua (433l 376sloc) (Dec 6 2022)

** Install Packer and Plugins

#+begin_src lua
  local install_path = vim.fn.stdpath 'data' .. '/site/pack/packer/start/packer.nvim'
  local is_bootstrap = false
  if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
    is_bootstrap = true
    vim.fn.execute('!git clone https://github.com/wbthomason/packer.nvim ' .. install_path)
    vim.cmd [[packadd packer.nvim]]
  end


  require('packer').init()
  local use = require('packer').use

  -- Package manager
  use 'wbthomason/packer.nvim'

  use { -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
    requires = {
      -- Automatically install LSPs to stdpath for neovim
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
      'j-hui/fidget.nvim',
    },
  }

  use { -- Autocompletion
    'hrsh7th/nvim-cmp',
    requires = { 'hrsh7th/cmp-nvim-lsp', 'L3MON4D3/LuaSnip', 'saadparwaiz1/cmp_luasnip' },
  }

  use { -- Highlight, edit, and navigate code
    'nvim-treesitter/nvim-treesitter',
    run = function()
      pcall(require('nvim-treesitter.install').update { with_sync = true })
    end,
  }

  use { -- Additional text objects via treesitter
    'nvim-treesitter/nvim-treesitter-textobjects',
    after = 'nvim-treesitter',
  }

  -- Git related plugins
  use 'lewis6991/gitsigns.nvim'

  use 'navarasu/onedark.nvim' -- Theme inspired by Atom
  use 'nvim-lualine/lualine.nvim' -- Fancier statusline
  use 'lukas-reineke/indent-blankline.nvim' -- Add indentation guides even on blank lines
  use 'numToStr/Comment.nvim' -- "gc" to comment visual regions/lines
  use 'tpope/vim-sleuth' -- Detect tabstop and shiftwidth automatically

  -- Fuzzy Finder (files, lsp, etc)
  use { 'nvim-telescope/telescope.nvim', branch = '0.1.x', requires = { 'nvim-lua/plenary.nvim' } }

  -- Fuzzy Finder Algorithm which requires local dependencies to be built. Only load if `make` is available
  use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make', cond = vim.fn.executable 'make' == 1 }


  if is_bootstrap then
    require('packer').sync()
  end

#+end_src

** Packer Reload and Recompile on Save
-- Automatically source and re-compile packer whenever you save this init.lua
#+begin_src lua
  local packer_group = vim.api.nvim_create_augroup('Packer', { clear = true })
  vim.api.nvim_create_autocmd('BufWritePost', {
    command = 'source <afile> | PackerCompile',
    group = packer_group,
    pattern = vim.fn.expand '$MYVIMRC',
  })
#+end_src

** [[ Setting Vim options ]]
-- See `:help vim.o`

#+begin_src lua
  -- Set highlight on search
  vim.o.hlsearch = false

  -- Make line numbers default
  vim.wo.number = true

  vim.opt.expandtab = true

  -- Enable mouse mode
  vim.o.mouse = 'a'

  -- Enable break indent
  vim.o.breakindent = true

  -- Save undo history
  vim.o.undofile = true

  -- Case insensitive searching UNLESS /C or capital in search
  vim.o.ignorecase = true
  vim.o.smartcase = true

  -- Decrease update time
  vim.o.updatetime = 250
  vim.wo.signcolumn = 'yes'

  -- Set colorscheme
  vim.o.termguicolors = true
  vim.cmd [[colorscheme onedark]]

  -- Set completeopt to have a better completion experience
  vim.o.completeopt = 'menuone,noselect'

#+end_src

** [[ Basic Keymaps ]]
#+begin_src lua
  -- Set <space> as the leader key
  -- See `:help mapleader`
  --  NOTE: Must happen before plugins are required (otherwise wrong leader will be used)
  vim.g.mapleader = ' '
  vim.g.maplocalleader = ' '

  -- Keymaps for better default experience
  -- See `:help vim.keymap.set()`
  vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

  -- Remap for dealing with word wrap
  vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
  vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
#+end_src

** [[ Highlight on yank ]]
-- See `:help vim.highlight.on_yank()`
#+begin_src lua
  local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
  vim.api.nvim_create_autocmd('TextYankPost', {
    callback = function()
      vim.highlight.on_yank()
    end,
    group = highlight_group,
    pattern = '*',
  })
#+end_src

** Set lualine as statusline
-- See `:help lualine.txt`
#+begin_src lua
  require('lualine').setup {
    options = {
      icons_enabled = false,
      theme = 'onedark',
      component_separators = '|',
      section_separators = '',
    },
  }
#+end_src

** Comments and indents
#+begin_src lua
  -- Enable Comment.nvim
  require('Comment').setup{
    toggler = {
        ---Block-comment toggle keymap
        block = '<M-/>',
    },
    ---LHS of operator-pending mappings in NORMAL and VISUAL mode
    opleader = {
        ---Block-comment keymap
        block = '<M-/>',
    },
  }

  -- Enable `lukas-reineke/indent-blankline.nvim`
  -- See `:help indent_blankline.txt`
  require('indent_blankline').setup {
    char = '┊',
    show_trailing_blankline_indent = false,
  }
#+end_src

** Gitsigns
-- See `:help gitsigns.txt`
#+begin_src lua
  require('gitsigns').setup {
    signs = {
      add = { text = '+' },
      change = { text = '~' },
      delete = { text = '_' },
      topdelete = { text = '‾' },
      changedelete = { text = '~' },
    },
  }
#+end_src

** [[ Configure Telescope ]]
-- See `:help telescope` and `:help telescope.setup()`

#+begin_src lua
  actions = require('telescope.actions')
  require('telescope').setup {
    defaults = {
      mappings = {
          i = {
            ['<C-u>'] = false,
            ['<C-d>'] = false,
            ['<C-g>'] = actions.close,
            ["<C-j>"] = actions.move_selection_next,
            ["<C-k>"] = actions.move_selection_previous,

          },
          n = {
              ['<C-d>'] = false,
              ['<C-g>'] = actions.close,
            },
      },
    },
  }

  -- Enable telescope fzf native, if installed
  pcall(require('telescope').load_extension, 'fzf')

  -- See `:help telescope.builtin`
  vim.api.nvim_set_keymap('n', '<leader>sF', [[<cmd>lua require('telescope.builtin').find_files({cwd='~/', previewer = false})<CR>]], { noremap = true, silent = true })
  vim.keymap.set('n', '<leader>so', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
  vim.keymap.set('n', '<leader>b', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
  vim.keymap.set('n', '<leader>/', function()
  -- You can pass additional configuration to telescope to change theme, layout, etc.
  require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
      winblend = 10,
      previewer = false,
  })
  end, { desc = '[/] Fuzzily search in current buffer]' })
  vim.keymap.set('n', '<leader>sf', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
  vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
  vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
  vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
  vim.keymap.set('n', '<leader>sd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })

#+end_src

** [[ Configure Treesitter ]]
-- See `:help nvim-treesitter`
#+begin_src lua
  require('nvim-treesitter.configs').setup {
    -- Add languages to be installed here that you want installed for treesitter
    ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'typescript', 'vim', 'vimdoc'},

    highlight = { enable = true },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = '<c-space>',
        node_incremental = '<c-space>',
        scope_incremental = '<c-s>',
        node_decremental = '<c-backspace>',
      },
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['aa'] = '@parameter.outer',
          ['ia'] = '@parameter.inner',
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
      swap = {
        enable = true,
        swap_next = {
          ['<leader>a'] = '@parameter.inner',
        },
        swap_previous = {
          ['<leader>A'] = '@parameter.inner',
        },
      },
    },
  }
#+end_src

** Diagnostic keymaps
#+begin_src lua
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
  vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)
#+end_src

** LSP settings.
--  This function gets run when an LSP connects to a particular buffer.
#+begin_src lua
  local on_attach = function(_, bufnr)
    -- NOTE: Remember that lua is a real programming language, and as such it is possible
    -- to define small helper and utility functions so you don't have to repeat yourself
    -- many times.
    --
    -- In this case, we create a function that lets us more easily define mappings specific
    -- for LSP related items. It sets the mode, buffer and description for us each time.
    local nmap = function(keys, func, desc)
      if desc then
        desc = 'LSP: ' .. desc
      end

      vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
    end

    nmap('<leader>rr', vim.lsp.buf.rename, '[R]e[n]ame')
    nmap('<leader>a', vim.lsp.buf.code_action, '[C]ode [A]ction')

    nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
    nmap('gi', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
    nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
    nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
    nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

    -- See `:help K` for why this keymap
    nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
    nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

    -- Lesser used LSP functionality
    nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
    nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
    nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
    nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
    nmap('<leader>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, '[W]orkspace [L]ist Folders')

    -- Create a command `:Format` local to the LSP buffer
    vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
      if vim.lsp.buf.format then
        vim.lsp.buf.format()
      elseif vim.lsp.buf.formatting then
        vim.lsp.buf.formatting()
      end
    end, { desc = 'Format current buffer with LSP' })
  end

  -- Setup mason so it can manage external tooling
  require('mason').setup()

  -- Enable the following language servers
  -- Feel free to add/remove any LSPs that you want here. They will automatically be installed
  local servers = { 'clangd', 'rust_analyzer', 'pyright', 'tsserver', 'lua_ls', 'gopls' }

  -- Ensure the servers above are installed
  require('mason-lspconfig').setup {

    ensure_installed = servers,
  }

  -- nvim-cmp supports additional completion capabilities
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

  for _, lsp in ipairs(servers) do
    require('lspconfig')[lsp].setup {
      on_attach = on_attach,
      capabilities = capabilities,
    }
  end
#+end_src

*** Turn on status information
#+begin_src lua
require('fidget').setup()
#+end_src

*** Example Custom Config for lua
#+begin_src lua

-- Make runtime files discoverable to the server
local runtime_path = vim.split(package.path, ';')
table.insert(runtime_path, 'lua/?.lua')
table.insert(runtime_path, 'lua/?/init.lua')

require('lspconfig').lua_ls.setup {
  on_attach = on_attach,
  capabilities = capabilities,
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT)
        version = 'LuaJIT',
        -- Setup your lua path
        path = runtime_path,
      },
      diagnostics = {
        globals = { 'vim' },
      },
      workspace = { library = vim.api.nvim_get_runtime_file('', true) },
      -- Do not send telemetry data containing a randomized but unique identifier
      telemetry = { enable = false },
    },
  },
}


local cmp = require 'cmp'
local luasnip = require 'luasnip'

cmp.setup {
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<C-y>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<C-j>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      end
    end, { 'i', 's' }),
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<C-k>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
}

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et

#+end_src

* Vim Keymaps

#+begin_src lua
  --Remap kj, ctrl+g as escape key
  vim.api.nvim_set_keymap('i', 'kj', '<esc>', { noremap = true })
  vim.api.nvim_set_keymap('c', 'kj', '<esc>', { noremap = true })
  vim.api.nvim_set_keymap('i', '<C-g>', '<esc>', { noremap = true })
  vim.api.nvim_set_keymap('c', '<C-g>', '<esc>', { noremap = true })

  -- when replacing the repcaled item gets in the keyboard no i dont want that
  vim.keymap.set({ "n", "x", "o" }, "<leader>p", "\"_dP")

  -- org like updown of selected region more visual
  vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv")
  vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv")

#+end_src

* UI Conf

#+begin_src lua
  vim.opt.nu = true
  vim.opt.relativenumber = true

  -- Recommended
  vim.opt.smarttab = true
  vim.opt.smartindent = true
  vim.opt.autoindent = true

  -- no swaps only long undo backup with undotree
  vim.opt.swapfile = false
  vim.opt.backup = false
  vim.opt.undofile = true

  -- dont wait to scroll till my cursor is at screen edge
  vim.opt.scrolloff = 8

  vim.opt.colorcolumn = "80"
#+end_src

* NetRW

#+begin_src lua
vim.keymap.set("n", "<C-x>d", vim.cmd.Ex)
#+end_src

* Languages
** Python
*** Vim-Venom : Venv Activator
#+begin_src lua
  use 'rafi/vim-venom'
  require('venom').setup({
    auto_activate = true,
    symbol = '🐍',
    root_patterns = {'.venv', '.python-version'},
  })
#+end_src
*** Pyright
#+begin_src lua
  -- Set a venv for pynvim
  vim.cmd [[let g:python3_host_prog = '~/.local/pipx/venvs/ipython/bin/python']]
  -- Disable python2 provider
  vim.cmd[[let g:loaded_python_provider = 0]]
  local configs = require('lspconfig/configs')
  local util = require('lspconfig/util')

  local path = util.path

  local function get_python_path(workspace)
    -- Use activated virtualenv.
    if vim.env.VIRTUAL_ENV then
      return path.join(vim.env.VIRTUAL_ENV, 'bin', 'python')
    end

    --[=====[
    -- Find and use virtualenv via poetry in workspace directory.
    local match = vim.fn.glob(path.join(workspace, 'poetry.lock'))
    if match ~= '' then
       local venv = vim.fn.trim(vim.fn.system('poetry env info -p'))
       return path.join(venv, 'bin', 'python')
    end
    --]=====]

    -- Find and use virtualenv in workspace directory.
    for _, pattern in ipairs({'*', '.*'}) do
      local match = vim.fn.glob(path.join(workspace, pattern, 'pyvenv.cfg'))
      if match ~= '' then
        return path.join(path.dirname(match), 'bin', 'python')
      end
    end

    -- Fallback to system Python.
    return exepath('python3') or exepath('python') or 'python'
  end

  require'lspconfig'.pyright.setup{
     on_attach=on_attach,
     capabilities=capabilities,
     cmd = { "pyright-langserver", "--stdio" },
    before_init = function(_, config)
      config.settings.python.pythonPath = get_python_path(config.root_dir)
    end,
      filetypes = { "python" },
      settings = {
        python = {
          analysis = {
            autoSearchPaths = true,
            diagnosticMode = "workspace",
            useLibraryCodeForTypes = true
          }
        }
      },
      single_file_support = true
  }
#+end_src
** Go
#+begin_src lua
  -- Go setup
  use 'ray-x/go.nvim'
  use 'ray-x/guihua.lua' -- recommanded if need floating window support

  require('go').setup()
  -- Run gofmt + goimport on save
  local format_sync_grp = vim.api.nvim_create_augroup("GoImport", {})
  vim.api.nvim_create_autocmd("BufWritePre", {
    pattern = "*.go",
    callback = function()
     require('go.format').goimport()
    end,
    group = format_sync_grp,
  })

  local go_capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
  require('go').setup({
    -- other setups ....
    lsp_cfg = {
      capabilities = go_capabilities,
      -- other setups
    },
  })
  require("go.format").goimport()  -- goimport + gofmt
#+end_src

* Dash Docs

#+begin_src lua
      use 'sunaku/vim-dasht'
      vim.cmd([[
          " search related docsets
    nnoremap <Leader>ds :Dasht<Space>

    " search ALL the docsets
    nnoremap <Leader>dS :Dasht!<Space>

      " search related docsets
  nnoremap <silent> <Leader>dd :call Dasht(dasht#cursor_search_terms())<Return>

  " search ALL the docsets
  nnoremap <silent> <Leader>dD :call Dasht(dasht#cursor_search_terms(), '!')<Return>

    " search related docsets
vnoremap <silent> <Leader>dd y:<C-U>call Dasht(getreg(0))<Return>

" search ALL the docsets
vnoremap <silent> <Leader>dD y:<C-U>call Dasht(getreg(0), '!')<Return>
      ]])
#+end_src

* NeoGIt

#+begin_src lua
  use {
   'TimUntersberger/neogit',
   requires = {
     'nvim-lua/plenary.nvim',
     'sindrets/diffview.nvim'
   }
  }

  vim.api.nvim_set_keymap('n', '<leader>g', [[<cmd>lua require('neogit').open()<CR>]], { noremap = true, silent = true })
  vim.api.nvim_set_keymap('i', '<C-x>g', [[<cmd>lua require('neogit').open()<CR>]], { noremap = true, silent = true })
  vim.api.nvim_set_keymap('n', '<C-x>g', [[<cmd>lua require('neogit').open()<CR>]], { noremap = true, silent = true })
  local neogit = require("neogit")

  neogit.setup {
    disable_signs = false,
    disable_hint = false,
    disable_context_highlighting = false,
    disable_commit_confirmation = false,
    auto_refresh = true,
    disable_builtin_notifications = false,
    commit_popup = {
        kind = "split",
    },
    -- Change the default way of opening neogit
    kind = "tab",
    -- customize displayed signs
    signs = {
      -- { CLOSED, OPENED }
      section = { ">", "v" },
      item = { ">", "v" },
      hunk = { "", "" },
    },
    integrations = {
      -- Neogit only provides inline diffs. If you want a more traditional way to look at diffs, you can use `sindrets/diffview.nvim`.
      -- The diffview integration enables the diff popup, which is a wrapper around `sindrets/diffview.nvim`.
      --
      -- Requires you to have `sindrets/diffview.nvim` installed.
      -- use {
      --   'TimUntersberger/neogit',
      --   requires = {
      --     'nvim-lua/plenary.nvim',
      --     'sindrets/diffview.nvim'
      --   }
      -- }
      --
      diffview = false
    },
    -- Setting any section to `false` will make the section not render at all
    sections = {
      untracked = {
        folded = false
      },
      unstaged = {
        folded = false
      },
      staged = {
        folded = false
      },
      stashes = {
        folded = true
      },
      unpulled = {
        folded = true
      },
      unmerged = {
        folded = false
      },
      recent = {
        folded = true
      },
    },
    -- override/add mappings
    mappings = {
      -- modify status buffer mappings
      status = {
        -- Adds a mapping with "B" as key that does the "BranchPopup" command
        ["B"] = "BranchPopup",
        -- Removes the default mapping of "s"
        ["s"] = "",
      }
    }
  }

#+end_src

* Project Nvim

#+begin_src lua
  use {
    "ahmedkhalf/project.nvim",
    config = function()
      require("project_nvim").setup {
         show_hidden = true,
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
      }
    end
  }
  require('telescope').load_extension('projects')
  vim.api.nvim_set_keymap('n', '<leader>sp', [[<cmd>lua require('telescope').extensions.projects.projects{}<CR>]], { noremap = true, silent = true })
#+end_src

* Copilot

#+begin_src lua
-- use 'github/copilot.vim'
use {
  "zbirenbaum/copilot.lua",
  cmd = "Copilot",
  event = "InsertEnter",
  config = function()
    require("copilot").setup({
      suggestion = { enabled = false },
      panel = { enabled = false },
    })
  end,
}
#+end_src

* Copilot cmp
#+begin_src lua
use {
  "zbirenbaum/copilot-cmp",
  after = { "copilot.lua" },
  config = function ()
    require("copilot_cmp").setup()
  end
}
#+end_src
* Harpoon

#+begin_src lua
  use {
     'ThePrimeagen/harpoon',
     requires = {
      'nvim-lua/plenary.nvim',
    }
  }
  local mark = require("harpoon.mark")
  local ui = require("harpoon.ui")

  require("telescope").load_extension('harpoon')
  vim.keymap.set('n', '<leader>ha', function() mark.add_file() end, { desc = '[H]arpoon [A]dd' })
  vim.keymap.set('n', '<leader>hm', function() ui.toggle_quick_menu() end, { desc = '[H]arpoon [M]menu'})
  vim.keymap.set('n', '<leader>hp', function() ui.nav_prev() end, { desc = '[H]arpoon [P]rev File' })
  vim.keymap.set('n', '<leader>hn', function() ui.nav_next() end, { desc = '[H]arpoon [N]ext File' })
  vim.keymap.set('n', '<leader>h1', function() return ui.nav_file(1) end, { desc = '[H]arpoon File [1]' })
  vim.keymap.set('n', '<leader>h2', function() return ui.nav_file(2) end)
  vim.keymap.set('n', '<leader>h3', function() return ui.nav_file(3) end)
  vim.keymap.set('n', '<leader>h4', function() return ui.nav_file(4) end)
  vim.keymap.set('n', '<leader>h5', function() return ui.nav_file(5) end)
  vim.keymap.set('n', '<leader>h6', function() return ui.nav_file(6) end)
  vim.keymap.set('n', '<leader>h7', function() return ui.nav_file(7) end)
  vim.keymap.set('n', '<leader>h8', function() return ui.nav_file(8) end)

#+end_src

* Undo-Tree

#+begin_src lua
use 'mbbill/undotree'
vim.cmd[[nnoremap <leader>U :UndotreeToggle<CR>]]
#+end_src

* Sniprun
Run visual selected block of code. Repl/Notebook style developement
#+begin_src lua
  use { 'michaelb/sniprun', run = 'bash ./install.sh'}
#+end_src

* Float Terminal

#+begin_src lua
use 'voldikss/vim-floaterm'
-- Configuration example
vim.cmd[[let g:floaterm_keymap_new    = '<leader>tn']]
vim.cmd[[let g:floaterm_keymap_prev   = '<leader>tp']]
vim.cmd[[let g:floaterm_keymap_next   = '<leader>tn']]
vim.cmd[[let g:floaterm_keymap_toggle = '<leader>tt']]
#+end_src

* Dap Mode

#+begin_src lua
  -- Debuggers
  use 'mfussenegger/nvim-dap'
  use 'rcarriga/nvim-dap-ui'
  use 'theHamsta/nvim-dap-virtual-text'
#+end_src

* Which-Key

#+begin_src lua
-- Lua
use {
  "folke/which-key.nvim",
  config = function()
    vim.o.timeout = true
    vim.o.timeoutlen = 300
    require("which-key").setup {
      -- your configuration comes here
      -- or leave it empty to use the default settings
      -- refer to the configuration section below
    }
  end
}
#+end_src

* Svart: Char jumper
Like Avy, use two char labels to jump to any text of visual screen.
#+begin_src lua
  use 'https://gitlab.com/madyanov/svart.nvim'
vim.keymap.set({ "n", "x", "o" }, "<leader><space>", "<Cmd>Svart<CR>")        -- begin exact search
  vim.keymap.set({ "n", "x", "o" }, "S", "<Cmd>SvartRegex<CR>")   -- begin regex search
  vim.keymap.set({ "n", "x", "o" }, "gs", "<Cmd>SvartRepeat<CR>") -- repeat with last accepted query

#+end_src

* Game: Vim Be Good

#+begin_src lua
use 'ThePrimeagen/vim-be-good'
#+end_src
