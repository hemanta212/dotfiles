" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key', 'airline', 'file-manager', 'python', 'syntax-checking', 'markdown', 'ctrlp', 
      \ ]
let g:spacevim_lsp_engine = 'coc'

" Uncomment the following line if your terminal(-emulator) supports true colors.
let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
let g:spacevim_nerd_fonts = 1

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()

  " Add your own plugin via Plug command.
  Plug 'junegunn/seoul256.vim'

  " Ranger support in vim
  Plug 'francoiscabrol/ranger.vim'

  " Better file browser
  "Plug 'scrooloose/nerdtree'
   
  " Nerdtree tabs
  "Plug 'jistr/vim-nerdtree-tabs'
  
  " Terminal Vim with 256 colors colorscheme
  "Plug 'fisadev/fisa-vim-colorscheme'
  
  " Airline
  "Plug 'vim-airline/vim-airline'
  "Plug 'vim-airline/vim-airline-themes'
  
  " Extension to ctrlp, for fuzzy command finder
  " Plug 'fisadev/vim-ctrlp-cmdpalette'
  "Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  "Plug 'junegunn/fzf.vim'
  
  " Completion from other opened files
  "Plug 'Shougo/context_filetype.vim'
  
  " Linters
  "Plug 'neomake/neomake'
  
  " Python formatting
   Plug 'psf/black'
  
  " Debugging in vim
  Plug 'vim-vdebug/vdebug'
  
  " Automatically sort python imports
  Plug 'fisadev/vim-isort'
  
  " Generate html in a simple way
  Plug 'mattn/emmet-vim'
  
  " Git integration
  Plug 'tpope/vim-fugitive'
  
  "TO search basically anything from vim.(Use it by ctrl + p.
  Plug 'kien/ctrlp.vim'
  
  " Navigate between vim and tmux
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'tmux-plugins/vim-tmux'
  
  "Cheat.sh
  Plug 'dbeniamine/cheat.sh-vim'
  
  " Backup vim session
  Plug 'tpope/vim-obsession'
  
  " Terminal improvements in neovim
  Plug 'kassio/neoterm'
  
  "Dart/Flutter vim
   Plug 'dart-lang/dart-vim-plugin'
  
  " Dart autocomplete By lsp
   Plug 'natebosch/vim-lsc'
   Plug 'natebosch/vim-lsc-dart'
  
  
  " Dart autocomplete By cocnvim (Performance intensive)
   Plug 'neoclide/coc.nvim', {'branch': 'release'}
  
endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()

  " Override the default settings.
  " Uncomment the following line to disable relative number.
  " set norelativenumber

  " Adding extras.
  " Uncomment the following line If you have installed the powerline fonts.
  " It is good for airline layer.
  " let g:airline_powerline_fonts = 1
  
  "......//////////////EMMET////////////////////
  "Map <C-y> to dt ok boss?
  let g:user_emmet_leader_key='dt'

"Flagging Unnecessary Whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"Remap esc to kj
imap kj <esc>
cnoremap kj <esc> 
nmap kj <esc>
 
nmap j gj
nmap k gk
 

"Remove highlight in search.
nmap <Leader>hl :nohl<Enter>

let g:python3_host_prog = '~/.virtualenvs/neovim3/bin/python3'
"Write selected lines to python file
vnoremap <Leader>fw :w .temp.swp<CR>j
vnoremap <Leader>fa :w! >> .dump.swp<CR>
vmap <Leader>fep <Leader>pw<Leader>pddd<Leader>prw<Leader>pd

"Write selected lines to python file
vnoremap <Leader>Pw :w .temp.swp<CR>j
vnoremap <Leader>Pa :w! >> .dump.swp<CR>
vmap <Leader>Pi <Leader>Pw<Leader>Pddd<Leader>Prw<Leader>Pd

nnoremap <Leader>Pra :read !python3 .dump.swp<CR><CR>
nnoremap <Leader>Prw :read !python3 .temp.swp<CR> :!rm .temp.swp <CR><CR>
nnoremap <Leader>Prd :!rm .dump.swp .temp.swp <CR><CR>

nnoremap <Leader>Pd <C-{>o```python<Esc><C-}>o```<CR><CR><Esc>
nnoremap <Leader>Cd <C-{>o```<Esc><C-}>o```<CR><CR><Esc>
nnoremap <Leader>Dd dkdd{jdd}

"map" terminal esc
nnoremap <Leader>T :sp \| term<CR>
tnoremap kj <C-\><C-n>


"'''''''''''/////////////////// COC.NVIM configs//////////////
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
"
"" if hidden is not set, TextEdit might fail.
set hidden
"
"" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
"
"" Better display for messages
set cmdheight=2
"
"" You will have bad experience for diagnostic messages when it's default "4000.
set updatetime=300
"
"" don't give |ins-completion-menu| messages.
set shortmess+=c
"
"" always show signcolumns
set signcolumn=yes
"
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by oth"er plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at curr"ent position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : ""\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>Rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelec"ted')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp'")
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for curre"nt paragraph
xmap <leader>A  <Plug>(coc-codeaction-selected)
nmap <leader>A  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>Ca  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>Af  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols fea"ture of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc"-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.o"rganizeImport')

" Add status line support, for integration with other plugin, checkout `:"h coc-status`

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

""'''''''''''/////////////////// Flutter coc-flutter //////////////
nnoremap <Leader>Fpg :CocCommand flutter.pub.get<CR>
nnoremap <Leader>Fr :CocCommand flutter.run<CR>
nnoremap <Leader>Fg :CocCommand flutter.gotoSuper<CR>


""'''''''''''/////////////////// Flutter dart-vim-plugin//////////////
let g:dart_style_guide = 2
let g:dart_format_on_save = 1

endfunction
