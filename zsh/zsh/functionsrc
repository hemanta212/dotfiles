# git wrapper that replaces all occurrences of "::" in arguments with the current branch name.
# Examples:
#   git checkout ::              → git checkout current-branch
#   git merge origin/::          → git merge origin/current-branch
#   git reset --hard origin/::   → git reset --hard origin/current-branch
# All other arguments are passed to /bin/git unchanged.
git() {
    local cur_branch
    cur_branch=$(/usr/bin/git rev-parse --abbrev-ref HEAD)

    local args=()
    for arg in "$@"; do
        arg="${arg//::/$cur_branch}"
        args+=("$arg")
    done

    /usr/bin/git "${args[@]}"
}

sbash () {
      source ~/.zshrc
}

loadenv () {
      export $(cat .env | xargs)
}

clone() {
    if [ $# -eq 1 ]
        then
           git clone https://github.com/hemanta212/$1 ~/dev/$1
    fi
    if [ $# -eq 2 ]
        then
            git clone https://github.com/$1/$2 ~/dev/$2
    fi
    if [ $# -eq 3 ]
        then
            git clone https://github.com/$1/$2 $3/$2
    fi
}

cheatsh(){
    curl http://cheat.sh/$1
}

chemacs() {
 echo $1 > ~/.config/chemacs/profile
}

neovim(){
    nvim $(fzf)
}

ec(){
    if [ $# -eq 0 ]
    then
	cat $HOME/dev/dotfiles/emacs/ec | zsh
   fi
   if [ $# -eq 1 ]
   then
   emacsclient -t $1
   fi
}

peredit(){
  cd ~/dev/personal/org
  git checkout org && emacs track.org
}

persync(){
  cd ~/dev/personal/org
  git pull origin org
  git add roam-notes
  git checkout org && git commit -a -m "Updates org file"
  git push origin org
}

gen-changelog(){
  echo "# Changelog" > CHANGELOG.txt
  echo "\n## What's New" >> CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" -i -E --grep="^(feat|fix)*feat" >> CHANGELOG.txt
  echo "\n\n## Bug Fixes" >> CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" -i -E --grep="^(feat|fix)*fix" >> CHANGELOG.txt
}

gen-changelog-plain(){
  echo "# Changelog\n" > CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" >> CHANGELOG.txt
}

colab_con (){
    if [ $# -eq 0 ]
        then
          PORT=`mystatus | awk '/Server/ { print $2;}'`;
          REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
          echo ":: $PORT : $REGION ...";
          ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io
          return
    fi

    if [ $# -eq 1 ]
        then
           ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.ngrok.io
    fi
    if [ $# -eq 2 ]
        then
           ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.$2.ngrok.io
    fi
}

mystatus (){
    if [ $# -eq 0 ]
        then
           lynx https://hemanta212.github.io/status -dump
           return
    fi

    current=$pwd
    cd ~/dev/status
    git checkout gh-pages
    git pull origin gh-pages

    echo "<div class='main'>" > index.html
    echo "<div class='head'><h1>$1</h1></div>" >> index.html

    if [ $# -eq 2 ]
        then
           echo "<div class='detail'><h3>Server: $2</h3></div>" >> index.html
    fi

    echo "<div class='time'>last updated: $(tz=asia/kathmandu date '+%l:%m %p | %a %b %d %y |')</div>" >> index.html
    echo "<div class='email'><br>email: sharmahemanta212@gmail.com</div>" >> index.html
    echo "</div>" >> index.html

    git commit -a -m "updates status"
    git push origin gh-pages
    cd $current
}

colabarg(){
    PORT=`mystatus | awk '/Server/ { print $2;}'`;
    REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
    echo ":: $PORT : $REGION ...";
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io $@
    return
}

colab_ssh(){
    PORT=`mystatus | awk '/Server/ { print $2;}'`;
    REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
    echo ":: $PORT : $REGION ...";
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -p $PORT pykancha@0.tcp.$REGION.ngrok.io -L 5000:localhost:5000
}

colab_c_con (){
    if [ $# -eq 0 ]
        then
          PORT=`mystatus | awk '/Server/ { print $2;}'`;
          REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
          echo ":: $PORT : $REGION ...";
	  ssh -X -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io
          return
    fi

    if [ $# -eq 1 ]
        then
           ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.ngrok.io
    fi
    if [ $# -eq 2 ]
        then
           ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.$2.ngrok.io
    fi
}

cloud_c_con(){
	  ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p 22 pykancha@$1
}

pc_ssh(){
    PORT=$1
    REGION=$2
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -p $PORT pykancha@0.tcp.$REGION.ngrok.io -L 5000:localhost:5000
}

stockinerary(){
    while true; do wget -ca -o /dev/null -O output.txt "http://v.osac.org.np/stockinerary-nepse-scraper.log"; sleep 2; done & 
    tail -f output.txt
  }


#gs() {
#    local config_file="$HOME/.cache/.gitfriendly"
#    
#    # Create the config file if it doesn't exist
#    touch "$config_file"
#
#    # Helper function to use fzf for interactive selection
#    fzf_select() {
#        local query="$1"
#        local result=$(cat "$config_file" | fzf --query="$query" --select-1 --exit-0)
#        if [[ -z "$result" ]]; then
#            return 1
#        fi
#        echo "$result"
#    }
#
#    # Helper function to get the first fzf match
#    fzf_first_match() {
#        local query="$1"
#        local result=$(cat "$config_file" | fzf --filter="$query" | head -n1)
#        if [[ -z "$result" ]]; then
#            return 1
#        fi
#        echo "$result"
#    }
#
#    # Helper function to perform actions based on selection
#    perform_action() {
#        local action="$1"
#        local selection="$2"
#        local friendly_name=$(echo "$selection" | cut -d':' -f1)
#        local branch=$(echo "$selection" | cut -d':' -f2)
#
#        case "$action" in
#            "switch")
#                echo "Switching to branch '$branch' (friendly name: '$friendly_name')"
#                git checkout "$branch"
#                ;;
#            "delete")
#                local current_branch=$(git rev-parse --abbrev-ref HEAD)
#                if [ "$current_branch" = "$branch" ]; then
#                    echo "Error: Cannot delete the branch you're currently on"
#                    return 1
#                fi
#                gsed -i '' "/^$friendly_name:/d" "$config_file"
#                git branch -D "$branch"
#                echo "Deleted friendly name '$friendly_name' and branch '$branch'"
#                ;;
#        esac
#    }
#
#    case "$1" in
#        -a)
#            if [ -z "$2" ]; then
#                echo "Usage: gs -a <friendly_name>"
#                return 1
#            fi
#            local current_branch=$(git rev-parse --abbrev-ref HEAD)
#            echo "$2:$current_branch" >> "$config_file"
#            echo "Added friendly name '$2' for current branch '$current_branch'"
#            ;;
#        -d)
#            if [ -z "$2" ]; then
#                local selection=$(fzf_select "")
#            else
#                local first_match=$(fzf_first_match "$2")
#                if [ $? -ne 0 ]; then
#                    echo "No matches found for '$2'"
#                    return 1
#                fi
#                local selection=$(fzf_select "$2")
#            fi
#            if [ $? -ne 0 ]; then
#                echo "No selection made. No action taken."
#                return 1
#            fi
#            perform_action "delete" "$selection"
#            ;;
#        -l)
#            cat "$config_file"
#            ;;
#        "")
#            local selection=$(fzf_select "")
#            if [ $? -ne 0 ]; then
#                echo "No selection made. No action taken."
#                return 1
#            fi
#            perform_action "switch" "$selection"
#            ;;
#        *)
#            local first_match=$(fzf_first_match "$1")
#            if [ $? -ne 0 ]; then
#                echo "No matches found for '$1'"
#                return 1
#            fi
#            local selection=$(fzf_select "$1")
#            if [ $? -ne 0 ]; then
#                echo "No selection made. No action taken."
#                return 1
#            fi
#            perform_action "switch" "$selection"
#            ;;
#    esac
#}

hist() {
    local history_file="$HOME/.cache/zsh/history"

    # Helper function to parse history entries
    parse_history() {
        gsed -E 's/^: ([0-9]+):[0-9];(.*)$/\2/' "$history_file"
    }

    # Helper function to use fzf for interactive selection
    fzf_select() {
        local query="$1"
        local result=$(parse_history | fzf --query="$query" --select-1 --exit-0)
        if [[ -z "$result" ]]; then
            return 1
        fi
        echo "$result"
    }

    # Helper function to find line number of selected entry
    find_line_number() {
        local selected_entry="$1"
        grep -n "$selected_entry" "$history_file" | cut -d ':' -f1
    }

    case "$1" in
        -e)
            if [ -z "$2" ]; then
                local selection=$(fzf_select "")
            else
                local selection=$(fzf_select "$2")
            fi
            if [ $? -ne 0 ]; then
                echo "No selection made. No action taken."
                return 1
            fi
            echo "Executing: $selection"
            eval "$selection"
            ;;
        -j)
            if [ -z "$2" ]; then
                local selection=$(fzf_select "")
            else
                local selection=$(fzf_select "$2")
            fi
            if [ $? -ne 0 ]; then
                echo "No selection made. No action taken."
                return 1
            fi
            local line_number=$(find_line_number "$selection")
            if [ -z "$line_number" ]; then
                echo "Couldn't find the exact line. Opening the history file."
                $EDITOR "$history_file"
            else
                echo "Opening history file at line $line_number"
                $EDITOR "+$line_number" "$history_file"
            fi
            ;;
        "")
            fzf_select ""
            ;;
        *)
            fzf_select "$1"
            ;;
    esac
}


# -----------------------------------------------------------------------------
# AI-powered Git Commit Function -- By Andrej Karpathy
# Copy paste this gist into your ~/.bashrc or ~/.zshrc to gain the gcm command. It:
# 1) gets the current staged changed diff
# 2) sends them to an LLM to write the git commit message
# 3) allows you to easily accept, edit, regenerate, cancel
# But - just read and edit the code however you like
# the llm CLI util is awesome, can get it here: https://llm.datasette.io/en/stable/
 
gcm() {
    # Function to generate commit message
    generate_commit_message() {
        git diff --cached | llm "
Below is a diff of all staged changes, coming from the command:
 
\\\
git diff --cached
\\\
 
Please generate a concise, one-line commit message for these changes."
    }
 
    # Function to read user input compatibly with both Bash and Zsh
    read_input() {
        if [ -n "$ZSH_VERSION" ]; then
            echo -n "$1"
            read -r REPLY
        else
            read -p "$1" -r REPLY
        fi
    }
 
    # Main script
    echo "Generating AI-powered commit message..."
    commit_message=$(generate_commit_message)
 
    while true; do
        echo -e "\nProposed commit message:"
        echo "$commit_message"
 
        read_input "Do you want to (a)ccept, (e)dit, (r)egenerate, or (c)ancel? "
        choice=$REPLY
 
        case "$choice" in
            a|A )
                if git commit -m "$commit_message"; then
                    echo "Changes committed successfully!"
                    return 0
                else
                    echo "Commit failed. Please check your changes and try again."
                    return 1
                fi
                ;;
            e|E )
                read_input "Enter your commit message: "
                commit_message=$REPLY
                if [ -n "$commit_message" ] && git commit -m "$commit_message"; then
                    echo "Changes committed successfully with your message!"
                    return 0
                else
                    echo "Commit failed. Please check your message and try again."
                    return 1
                fi
                ;;
            r|R )
                echo "Regenerating commit message..."
                commit_message=$(generate_commit_message)
                ;;
            c|C )
                echo "Commit cancelled."
                return 1
                ;;
            * )
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
}
