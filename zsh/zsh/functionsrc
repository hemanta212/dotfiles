sbash () {
      source ~/.zshrc
}

loadenv () {
      export $(cat .env | xargs)
}

clone() {
    if [ $# -eq 1 ]
        then
           git clone https://github.com/hemanta212/$1 ~/dev/$1
    fi
    if [ $# -eq 2 ]
        then
            git clone https://github.com/$1/$2 ~/dev/$2
    fi
    if [ $# -eq 3 ]
        then
            git clone https://github.com/$1/$2 $3/$2
    fi
}

cheatsh(){
    curl http://cheat.sh/$1
}

chemacs() {
 echo $1 > ~/.config/chemacs/profile
}

neovim(){
    nvim $(fzf)
}

ec(){
    if [ $# -eq 0 ]
    then
	cat $HOME/dev/dotfiles/emacs/ec | zsh
   fi
   if [ $# -eq 1 ]
   then
   emacsclient -t $1
   fi
}

peredit(){
  cd ~/dev/personal/org
  git checkout org && emacs track.org
}

persync(){
  cd ~/dev/personal/org
  git pull origin org
  git add roam-notes
  git checkout org && git commit -a -m "Updates org file"
  git push origin org
}

gen-changelog(){
  echo "# Changelog" > CHANGELOG.txt
  echo "\n## What's New" >> CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" -i -E --grep="^(feat|fix)*feat" >> CHANGELOG.txt
  echo "\n\n## Bug Fixes" >> CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" -i -E --grep="^(feat|fix)*fix" >> CHANGELOG.txt
}

gen-changelog-plain(){
  echo "# Changelog\n" > CHANGELOG.txt
  git log $(git describe --tags --abbrev=0 @^)..HEAD --pretty=format:"%h: %s" >> CHANGELOG.txt
}

colab_con (){
    if [ $# -eq 0 ]
        then
          PORT=`mystatus | awk '/Server/ { print $2;}'`;
          REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
          echo ":: $PORT : $REGION ...";
          ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io
          return
    fi

    if [ $# -eq 1 ]
        then
           ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.ngrok.io
    fi
    if [ $# -eq 2 ]
        then
           ssh -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.$2.ngrok.io
    fi
}

mystatus (){
    if [ $# -eq 0 ]
        then
           lynx https://hemanta212.github.io/status -dump
           return
    fi

    current=$pwd
    cd ~/dev/status
    git checkout gh-pages
    git pull origin gh-pages

    echo "<div class='main'>" > index.html
    echo "<div class='head'><h1>$1</h1></div>" >> index.html

    if [ $# -eq 2 ]
        then
           echo "<div class='detail'><h3>Server: $2</h3></div>" >> index.html
    fi

    echo "<div class='time'>last updated: $(tz=asia/kathmandu date '+%l:%m %p | %a %b %d %y |')</div>" >> index.html
    echo "<div class='email'><br>email: sharmahemanta212@gmail.com</div>" >> index.html
    echo "</div>" >> index.html

    git commit -a -m "updates status"
    git push origin gh-pages
    cd $current
}

colabarg(){
    PORT=`mystatus | awk '/Server/ { print $2;}'`;
    REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
    echo ":: $PORT : $REGION ...";
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io $@
    return
}

colab_ssh(){
    PORT=`mystatus | awk '/Server/ { print $2;}'`;
    REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
    echo ":: $PORT : $REGION ...";
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -p $PORT pykancha@0.tcp.$REGION.ngrok.io -L 5000:localhost:5000
}

colab_c_con (){
    if [ $# -eq 0 ]
        then
          PORT=`mystatus | awk '/Server/ { print $2;}'`;
          REGION=`mystatus | awk '/Server/ {split($NF, DATA, "["); split(DATA[2], D, "]"); $FS="["; print D[1];}'`;
          echo ":: $PORT : $REGION ...";
	  ssh -X -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $PORT pykancha@0.tcp.$REGION.ngrok.io
          return
    fi

    if [ $# -eq 1 ]
        then
           ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.ngrok.io
    fi
    if [ $# -eq 2 ]
        then
           ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p $1 pykancha@0.tcp.$2.ngrok.io
    fi
}

cloud_c_con(){
	  ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -L 3389:localhost:3389 -L 50080:localhost:5050 -R 5037:localhost:5037 -R 60262:localhost:60262 -p 22 pykancha@$1
}

pc_ssh(){
    PORT=$1
    REGION=$2
    ssh -Y -m hmac-sha1 -c aes128-gcm@openssh.com -C -p $PORT pykancha@0.tcp.$REGION.ngrok.io -L 5000:localhost:5000
}

stockinerary(){
    while true; do wget -ca -o /dev/null -O output.txt "http://v.osac.org.np/stockinerary-nepse-scraper.log"; sleep 2; done & 
    tail -f output.txt
  }




# Add this to your .zshrc or a separate file that's sourced by .zshrc

gs() {
    local config_file="$HOME/.cache/.gitfriendly"
    
    # Create the config file if it doesn't exist
    touch "$config_file"

    # Helper function to find the closest match
    find_closest_match() {
        local input="$1"
        local closest_match=""
        local highest_score=-1

        while IFS= read -r line; do
            local friendly_name=$(echo "$line" | cut -d':' -f1)
            local score=0

            # Calculate the match score based on common characters
            for (( i=0; i<${#input}; i++ )); do
                if [[ "$friendly_name" == *"${input:$i:1}"* ]]; then
                    ((score++))
                fi
            done

            if [ "$score" -gt "$highest_score" ]; then
                closest_match="$friendly_name"
                highest_score=$score
            fi
        done < "$config_file"
        echo "$closest_match"
    }

    case "$1" in
        -a)
            if [ -z "$2" ]; then
                echo "Usage: gs -a <friendly_name>"
                return 1
            fi
            local current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "$2:$current_branch" >> "$config_file"
            echo "Added friendly name '$2' for current branch '$current_branch'"
            ;;
        -d)
            local current_branch=$(git rev-parse --abbrev-ref HEAD)
            local friendly_name=$(grep ":$current_branch$" "$config_file" | cut -d':' -f1)
            if [ -z "$friendly_name" ]; then
                echo "No friendly name found for current branch '$current_branch'"
                return 1
            fi
            sed -i '' "/:$current_branch$/d" "$config_file"
            git branch -D "$current_branch"
            echo "Deleted friendly name '$friendly_name' and branch '$current_branch'"
            ;;
        -l)
            cat "$config_file"
            ;;
        *)
            if [ -z "$1" ]; then
                echo "Usage: gs <friendly_name> | -a <friendly_name> | -d | -l"
                return 1
            fi
            local branch=$(grep "^$1:" "$config_file" | cut -d':' -f2)
            if [ -z "$branch" ]; then
                local closest_match=$(find_closest_match "$1")
                if [ -z "$closest_match" ]; then
                    echo "Friendly name not found. Use 'gs -a <friendly_name>' to create a new friendly name."
                    return 1
                fi
                branch=$(grep "^$closest_match:" "$config_file" | cut -d':' -f2)
                echo "WARNING: Auto-inferred closest match '$closest_match'"
            fi
            git checkout "$branch"
            ;;
    esac
}

