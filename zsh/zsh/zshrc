# ///////////////////////////BASIC SETTINGS///////////////////////
# Enable colors and change prompt:
autoload -U colors && colors

# History settings : source https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
HISTSIZE=999999999
HISTFILE=$HOME/.cache/zsh/history # History in cache directory:
SAVEHIST=$HISTSIZE
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Basic auto/tab complete:
fpath+=~/.config/zsh/zfunc
autoload -U bashcompinit
bashcompinit
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
# compinit
_comp_options+=(globdots)		# Include hidden files.

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M viins 'kj' vi-cmd-mode
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
# bindkey -M vicmd 'jj' history-substring-search-up
# bindkey -M vicmd 'kk' history-substring-search-down
# bindkey '^[[A' history-substring-search-up
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

#//////////////////////////EXPORTS///////////////////////////////
export EDITOR=nvim
export PATH="$PATH":"$HOME/bin"
export PATH="$PATH":"$HOME/local/flutter/bin/"
export PATH="$PATH":"$HOME/local/tools/bin/"
export PATH="$PATH":"$HOME/.local/bin/"
export PATH="/usr/local/sbin:$PATH";
export PATH="$HOME/local/.blogger_cli/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"

# Export the Android SDK path
export ANDROID_HOME=$HOME/local/android-sdk
export PATH=$PATH:$ANDROID_HOME/cmdline-tools/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Fixes sdkmanager error with java versions higher than java 8 !!MAY cause problems otherwise
#export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'


export XDG_CONFIG_HOME="$HOME/.config/"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/ptpython/.pythonrc.py"

export MANPATH="/usr/local/man:$MANPATH"


if [ -d ~/.config/nvm ]; then
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
fi

export _ZO_DATA_DIR="$HOME/.config/zsh/"
eval "$(zoxide init zsh)"

# Fzf history search and keybindings:
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
[ -f /usr/share/doc/fzf/examples/completion.zsh ] && source /usr/share/doc/fzf/examples/completion.zsh
[ -f /home/pykancha/.deta/bin/deta ] && export PATH="/home/pykancha/.deta/bin:$PATH"

# If inside wsl
if uname -r | grep -q 'microsoft'; then
	export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0 #GWSL
	export HOST_IP="$(ip route |awk '/^default/{print $3}')"
	export PULSE_SERVER="tcp:$HOST_IP"
	#export PULSE_SERVER=tcp:$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}') #GWSL
	#export PULSE_COOKIE=/mnt/c/Users/Dell/.pulse-cookie
	# export LIBGL_ALWAYS_INDIRECT=1 #GWSL
	# WSLD X11 session persist
	#if ! pgrep wsld >> /dev/null 2>&1 ; then
	#    nohup wsld > /dev/null < /dev/null 2>&1 &
	#    disown
#
	    # sleep until $DISPLAY is up
#	    while ! xset q > /dev/null 2>&1 ; do
#		sleep 0.3
#	    done
#	fi
fi

#if inside termux
if echo $OSTYPE | grep -q 'android' ; then
    alias pbc="curl -F 'sprunge=<-' http://sprunge.us | termux-clipboard-set"
    alias tro='termux-open'
    alias ytdl='youtube-dl'

    e(){
    emacsclient -t -s $PREFIX/var/run/emacs$(id -u)/server $@
    }

    export PATH="$PATH":"$HOME/.cargo/bin/"
    export DISPLAY=127.0.0.1:0
fi


# If inside Proper linux and using xorg
# This session check works in fedora and ubuntu 18
# ON wayland use  gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
# session_type = loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type
if ! uname -a | grep -q "microsoft" && loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type | grep -q "x11" ; then
        /usr/bin/setxkbmap -option 'caps:ctrl_modifier'
        /usr/bin/xcape -e 'Caps_Lock=Escape' -t 100

        if ! ps cax | grep -q Audiorelay; then
            # survive after terminal close, run in background, pause stdinput, not create nohup.out file
            nohup $HOME/.local/bin/Audiorelay </dev/null >/dev/null 2>&1 &
        fi

        #sudo nice -n -20 $HOME/.local/caps2esc-legacy/caps2esc >/tmp/caps2esc.log 2>/tmp/caps2esc.err &
fi

# export pyenv
if [ -d ~/.pyenv/bin ]; then
	export PYENV_ROOT="$HOME/.pyenv"
	command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        #eval "$(pyenv virtualenv-init -)"
fi


if [ -d /usr/local/go ]; then
    export GOHOME=$HOME/.local/share/go
    export GOBIN=$GOHOME/bin
    export PATH=$PATH:/usr/local/go/bin:$GOBIN
fi

if [ -d ~/.local/pipx ]; then
eval "$(register-python-argcomplete pipx)"
fi


