# ///////////////////////////BASIC SETTINGS///////////////////////
# Enable colors and change prompt:
autoload -U colors && colors

# History settings : source https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
HISTSIZE=999999999
HISTFILE=$HOME/.cache/zsh/history # History in cache directory:
SAVEHIST=$HISTSIZE
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Basic auto/tab complete:
fpath+=~/.config/zsh/zfunc
autoload -U bashcompinit
bashcompinit
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
# compinit
_comp_options+=(globdots)		# Include hidden files.

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M viins 'kj' vi-cmd-mode
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
# bindkey -M vicmd 'jj' history-substring-search-up
# bindkey -M vicmd 'kk' history-substring-search-down
# bindkey '^[[A' history-substring-search-up
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

#//////////////////////////EXPORTS///////////////////////////////
export EDITOR=nvim
export PATH="$PATH":"$HOME/bin"
export PATH="$PATH":"$HOME/local/flutter/bin/"
export PATH="$PATH":"$HOME/local/tools/bin/"
export PATH="$PATH":"$HOME/.local/bin/"
export PATH="/usr/local/sbin:$PATH";
export PATH="/usr/local/bin:$PATH";
export PATH="$HOME/local/.blogger_cli/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
alias py='.venv/bin/python'
export PATH="$HOME/.emacs.d/bin:$PATH"

# Export the Android SDK path
export ANDROID_HOME=$HOME/local/android-sdk
export PATH=$PATH:$ANDROID_HOME/cmdline-tools/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Fixes sdkmanager error with java versions higher than java 8 !!MAY cause problems otherwise
#export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'


export XDG_CONFIG_HOME="$HOME/.config/"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/ptpython/.pythonrc.py"

export MANPATH="/usr/local/man:$MANPATH"

if [ -d /opt/homebrew/ ]; then
export PATH="/opt/homebrew/bin:$PATH"
fi


if [ -d ~/.config/nvm ]; then
export NVM_DIR="$HOME/.config//nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi
# TODO NVM SUCKS COULDNT MAKE IT LOAD things correctly
export PATH="$PATH":"$HOME/.config/nvm/versions/node/v16.16.0/bin"

# Fzf history search and keybindings:
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
[ -f /usr/share/doc/fzf/examples/completion.zsh ] && source /usr/share/doc/fzf/examples/completion.zsh
[ -f /home/pykancha/.deta/bin/deta ] && export PATH="/home/pykancha/.deta/bin:$PATH"

# If inside wsl
if uname -r | grep -q 'microsoft'; then
	export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0 #GWSL
	export HOST_IP="$(ip route |awk '/^default/{print $3}')"
	export PULSE_SERVER="tcp:$HOST_IP"
	#export PULSE_SERVER=tcp:$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}') #GWSL
	#export PULSE_COOKIE=/mnt/c/Users/Dell/.pulse-cookie
	# export LIBGL_ALWAYS_INDIRECT=1 #GWSL
	# WSLD X11 session persist
	#if ! pgrep wsld >> /dev/null 2>&1 ; then
	#    nohup wsld > /dev/null < /dev/null 2>&1 &
	#    disown
#
	    # sleep until $DISPLAY is up
#	    while ! xset q > /dev/null 2>&1 ; do
#		sleep 0.3
#	    done
#	fi
fi

#if inside termux
if echo $OSTYPE | grep -q 'android' ; then
    alias pbc="curl -F 'sprunge=<-' http://sprunge.us | termux-clipboard-set"
    alias tro='termux-open'
    alias ytdl='youtube-dl'

    e(){
    emacsclient -t -s $PREFIX/var/run/emacs$(id -u)/server $@
    }

    export PATH="$PATH":"$HOME/.cargo/bin/"
fi

if [ -d /usr/local/go ]; then
    export GOHOME=$HOME/.local/share/go
    export GOBIN=$GOHOME/bin
    export PATH=$PATH:/usr/local/go/bin:$GOBIN
fi
if [ -d $HOME/local/flutter ]; then
    export PATH=$PATH:$HOME/local/flutter/bin
fi
if [ -d $HOME/.pub-cache/bin ]; then
    export PATH=$PATH:$HOME/.pub-cache/bin
fi
if [ -d $HOME/.cargo ]; then
 source $HOME/.cargo/env
fi
if [ -d ~/.local/pipx ]; then
#eval "$(~/.local/bin/register-python-argcomplete pipx)"
fi

export _ZO_DATA_DIR="$HOME/.config/zsh/"
eval "$(zoxide init zsh)"

export GOPRIVATE="github.com/MathGaps/*,go.buf.build"

if [ -d /Users/$USER/Library/Android/sdk ]; then
export ANDROID_HOME=/Users/$USER/Library/Android/sdk
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
export JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home"
fi

if [ -d /opt/homebrew/opt/postgresql@12/bin/ ]; then
export PATH=/opt/homebrew/opt/postgresql@12/bin:$PATH
alias startpg="pg_ctl -D /opt/homebrew/var/postgresql@12"
fi

if [ -d "$HOME/Library/Application Support/Neo4j Desktop/Application/relate-data/dbmss/dbms-f46eb3cb-ba46-4f8c-8d08-1c546ececd73/bin" ]; then
export NEO4J_HOME="$HOME/Library/Application Support/Neo4j Desktop/Application/relate-data/dbmss/dbms-f46eb3cb-ba46-4f8c-8d08-1c546ececd73"
export PATH=$NEO4J_HOME/bin:$PATH
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if [ -f '/opt/homebrew/Caskroom/miniconda/base/bin/conda' ]; then
  __conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
          . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
      else
          export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
      fi
  fi
unset __conda_setup
export CONDA_PATH="/opt/homebrew/Caskroom/miniconda/base"
fi
# <<< conda initialize <<<

if [ -f "$HOME/.cargo/env" ]; then . "$HOME/.cargo/env"; fi
# Added by LM Studio CLI tool (lms)
if [ -d "$HOME/.cache/lm-studio/bin" ]; then export PATH="$PATH:$HOME/.cache/lm-studio/bin"; fi
if [ -d "$HOME/.dotnet/tools" ]; then export PATH="$PATH:$HOME/.dotnet/tools"; fi
