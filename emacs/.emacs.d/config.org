#+Title: Emacs configuration file
#+PROPERTY: header-args:emacs-lisp :tangle $HOME/dev/dotfiles/emacs/.emacs.d/init.el

* Package init
#+begin_src emacs-lisp 
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  ;; To see which package load when to optimize the startup time
  (setq use-package-verbose t)
#+end_src
* Basic UI Configuration
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (if (display-graphic-p)
      (progn
        (set-fringe-mode 10)        ; Give some breathing room
        (tooltip-mode -1)           ; Disable tooltips
        (tool-bar-mode -1)
        (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)
        (scroll-bar-mode -1)))

  (menu-bar-mode -1)            ; Disable the menu bar
  ;; Set up the visible bell
  (setq visible-bell t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                    shell-mode-hook
                  treemacs-mode-hook
                    eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src
* Startup Performance
Add a function to =emacs-startup-hook= to print out the duration of Emacs startup:

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 10000 10000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)
  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Key-bindings
#+begin_src emacs-lisp
    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    ;; Remap  Imenu to M-i
    (global-set-key (kbd "M-i") 'imenu)
    (global-set-key (kbd "C-c p f") 'counsel-fzf)
    (global-set-key (kbd "C-c C-x s") 'org-search-view)
    (global-set-key (kbd "M-w") 'scroll-other-window)
    (global-set-key (kbd "M-W") 'scroll-other-window-down)
    
    
    (use-package general
      :after evil
      :config
      (general-create-definer rune/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")
    
      (rune/leader-keys
        "t"  '(:ignore t :which-key "toggles")
        "tt" '(counsel-load-theme :which-key "choose theme")
        "fo" '(lambda () (interactive) (find-file (expand-file-name "~/dev/personal/org/track.org")))
        "fde" '(lambda () (interactive) (find-file (expand-file-name "~/dev/dotfiles/emacs/.emacs.d/config.org")))))
    
    
    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-want-minibuffer t)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    
      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))
    
    (defun evil-init-minibuffer ()
      (set (make-local-variable 'evil-echo-state) nil)
      (evil-emacs-state))
  
     (add-hook 'minibuffer-setup-hook 'evil-init-minibuffer 90)
    
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
    
    (use-package evil-escape
      :after evil
      :config
      (evil-escape-mode)
      (setq evil-escape-key-sequence "kj"))
#+end_src
* UI configuration
** Command log mode
#+begin_src emacs-lisp 
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src
** Color theme
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))
#+end_src
** Better modeline
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-ivy
    :after (all-the-icons ivy))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** Ivy and Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-x b" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))

    :config
    (counsel-mode 1))
#+end_src
*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    ;; :custom
    ;; (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Helpful help commands
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** Text Scaling
#+begin_src emacs-lisp
  (use-package hydra
  :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs
  
*** Configuration

#+begin_src emacs-lisp

    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first"))
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer))

    (use-package dired-single
      :commands (dired dired-jump))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-open
      :commands (dired dired-jump)
      :config
      ;; Doesn't work as expected!
      ;; (add-to-list 'dired-open-functions #'dired-open-xdg t)
      (setq dired-open-extensions '(("png" . "termux-open")
                                    ("jpg" . "termux-open")
                                    ("wav" . "termux-open")
                                    ("mp3" . "termux-open")
                                    ("mp4" . "termux-open"))))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))
#+end_src

* Org-mode
** Better font faces 
#+begin_src emacs-lisp
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** General
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    ;; :defer t
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
      (setq org-agenda-files
          '("~/dev/personal/org/track.org"))
    (efs/org-font-setup))
#+end_src
** Nicer Bullets 
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center Org buffers
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
** Configure babel languages
#+begin_src emacs-lisp 
 (with-eval-after-load 'org 
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (C . t)
      (scheme . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (setq org-confirm-babel-evaluate nil))
#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto tangle configuration file
#+begin_src emacs-lisp
    ;; Automatically tangle our Emacs.org config file when we save it
    (defun efs/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
                          (expand-file-name "$HOME/dev/dotfiles/emacs/.emacs.d/config.org"))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

  (defun efs/org-babel-tangle-neovim-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "$HOME/dev/dotfiles/neovim/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)
                               (add-hook 'after-save-hook #'efs/org-babel-tangle-neovim-config) ))
#+end_src

** Custom org utilities
*** Auto export on save (toggler)
#+begin_src emacs-lisp
  (defun toggle-org-markdown-export-on-save ()
    (interactive)
    (if (memq 'org-md-export-to-markdown after-save-hook)
        (progn
          (remove-hook 'after-save-hook 'org-md-export-to-markdown t)
          (message "Disabled org markdown export on save for current buffer..."))
      (add-hook 'after-save-hook 'org-md-export-to-markdown nil t)
      (message "Enabled org markdown export on save for current buffer...")))
#+end_src

** Org-download
  Repo: https://github.com/abo-abo/org-download
#+begin_src emacs-lisp
  (use-package org-download
  ;; Drag-and-drop to `dired`
    :hook (dired-mode-hook . org-download-enable))
  ;; (add-hook 'dired-mode-hook 'org-download-enable)

** Clocking Work times
Org allows clocking time spend on task
To save the clock history across Emacs sessions, use:
#+begin_src emacs-lisp
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
#+end_src
* Org-roam
** General
#+begin_src emacs-lisp
    (use-package org-roam
      :after org-mode
      :init
      (setq org-roam-directory "~/org-roam")
      :custom
      (org-roam-db-update-method 'immediate)
      :config
      (org-roam-mode))
#+end_src

* Development
** Languages
*** IDE features with LSP Mode
**** Lsp-mode
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
      (setq lspheaderline-breadcumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))
  
      (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l") 
      (setq lsp-lens-enable t) 
      (setq lsp-signature-auto-activate nil) 
      ;; (setq lsp-enable-file-watchers nil)
      :config
      (lsp-enable-which-key-integration t))
#+end_src
**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  
  (use-package lsp-treemacs
    :after lsp)
    (with-eval-after-load 'treemacs
    (treemacs-resize-icons 15))
#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
  :after lsp)

#+end_src

**** FlyCheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :config
     (setq flycheck-python-pyright-executable "~/.emacs.d/var/lsp/server/npm/pyright")
    :init (global-flycheck-mode))
#+end_src
*** Python
**** Poetry
#+begin_src emacs-lisp
  (use-package poetry
  :after python-mode)
  ;; :config
  ;; (message "Poetry loaded")
  ;; (poetry-tracking-mode))
#+end_src
**** Lsp-pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :defer t
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp)  ; lsp or lsp-deferred
                            (poetry-tracking-mode))))
#+end_src
**** Black Formatting
#+begin_src emacs-lisp
  (use-package blacken
    :demand t
    :after poetry
    :hook (poetry-tracking-mode . blacken-mode))
    ;;:customize
    ;;(blacken-only-if-project-is-blackened))
#+end_src
**** Manim build after save
#+begin_src emacs-lisp
  (defun manim-build-img ()
      "Build manim image after saving a file"
      (when (or (string-equal (buffer-file-name)
                          (expand-file-name "~/dev/manim/manim/mathgaps/test.py"))
             (string-equal (file-name-directory buffer-file-name)
                          (expand-file-name "~/dev/manim/manim/mathgaps/scripts/")))
        (async-shell-command (format "cd ~/dev/manim/manim/mathgaps && poetry run python -m manim -ql %s" buffer-file-name))))
  
  (defun kivy-build ()
    "Build kivy app after saving a file"
      (when (string-equal (file-name-directory buffer-file-name)
                          (expand-file-name "~/dev/kivy/test/"))
      (shell-command-to-string "cp main.py /mnt/d/projects/kivy/test/ && cd /mnt/d/projects/kivy/test && poetry.exe run python main.py")))
  
  (defun sphinx-build ()
      "Build sphinx html builds after saving a file"
      (when (string-equal (file-name-directory buffer-file-name)
                          (expand-file-name "~/dev/c-practice/cipher-site/"))
        (async-shell-command (format "rm -rf _build/html && poetry run make html" buffer-file-name))))
  
    (add-hook 'after-save-hook #'manim-build-img)
    (add-hook 'after-save-hook #'sphinx-build)
#+end_src
*** Flutter/Dart
**** Dart-Mode
#+begin_src emacs-lisp
  (use-package dart-mode
    :defer t
    :custom
    (dart-sdk-path (concat (getenv "HOME") "/local/flutter/bin/cache/dark-sdk/")
    dart-format-on-save t))
#+end_src
**** Lsp-dart
#+begin_src emacs-lisp
    (use-package lsp-dart
        :defer t
        :ensure t
        :hook (dart-mode . (lambda ()
                              (require 'lsp-dart)
                              (lsp))))  ; lsp or lsp-deferred
#+end_src
**** Hover
#+begin_src emacs-lisp
  (use-package hover
    :after dart-mode
;;    :bind (:map dart-mode-map
;;                ("C-M-z" . #'hover-run-or-hot-reload)
 ;;               ("C-M-x" . #'hover-run-or-hot-restart)
  ;;              ("C-M-p" . #'hover-take-screenshot'))
    :init
    (setq hover-flutter-sdk-path (concat (getenv "HOME") "/local/flutter")
          hover-command-path (concat (getenv "GOPATH") "/bin/hover")
          hover-hot-reload-on-save t
          hover-screenshot-path (concat "/mnt/d/" "images/flutter")
          hover-screenshot-prefix "emacs-"
          hover-observatory-uri "http://0.0.0.0:50300"
          hover-clear-buffer-on-hot-restart t))
#+end_src
*** C/C++ 
#+begin_src emacs-lisp
;;(with-eval-after-load 'lsp-mode
;;  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
(add-hook 'c-mode-hook 'lsp)
(add-hook 'cpp-mode-hook 'lsp)
#+end_src

*** Typescript
  (use-package typescript-mode
      :mode "\\.ts\\'" ;; only load/open for .ts file 
      :hook (typescript-mode . lsp-deferred)
      :config
      (setq typescript-indent-level 2))
*** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
      :mode "\\.lua\\'" ;; only load/open for .ts file 
      :hook (lua-mode . lsp-deferred)
      :config
      (setq lua-indent-level 3)
      (setq lua-documentation-function 'browse-web))
#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind ;;(:map company-active-map
           ;;("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Company Tabnine
#+begin_src emacs-lisp
  (use-package company-tabnine
    :ensure t
    :config
    ;; Trigger completion immediately.
    (setq company-idle-delay 0)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (setq company-show-numbers t)
    )
  (add-to-list 'company-backends #'company-tabnine)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/dev")
      (setq projectile-project-search-path '("~/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; (use-package forge
  ;; :after magit)

  ;; (use-package magit-delta
  ;; :after magit
  ;; :config
  ;; (add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1))))
#+end_src
** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow-delimeters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src 

** Yasnippet 
Yasnippet is the snippet tool for emacs. It doesnot bundle the snippets itself though which should be separately installed.
#+begin_src emacs-lisp
  (use-package yasnippet
  :defer t
  :config
  (setq yas-snippet-dirs '("~/dev/dotfiles/emacs/snippets/"))
  (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)


#+end_src
** Vterm
Utrafast modern terminal written in C libvterm.
#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm)
    ;; (setq vterm-max-scrollback 10000))
#+end_src

* Emacs Outside
** Edit Server
#+begin_src emacs-lisp
  (use-package edit-server
   :config
    (edit-server-start))
#+end_src
* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 1 1000 1000))

#+end_src
